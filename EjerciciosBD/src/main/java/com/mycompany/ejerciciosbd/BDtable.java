/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.ejerciciosbd;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.mysql.cj.xdevapi.JsonArray;
import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.*;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Javier
 */
public class BDtable extends javax.swing.JFrame {

    /**
     * Creates new form BDtable
     */
    public BDtable() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBCrear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTModelo = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTAutonomia = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTPotencia = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTMaletero = new javax.swing.JTextPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTPrecio = new javax.swing.JTextPane();
        jBModificar = new javax.swing.JButton();
        jBDelete = new javax.swing.JButton();
        jBImportCSV = new javax.swing.JButton();
        jBLeer = new javax.swing.JButton();
        btExortarCSV = new javax.swing.JButton();
        btExortarJSON = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBCrear.setText("Crear");
        jBCrear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBCrearMouseClicked(evt);
            }
        });
        jBCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "modelo", "potencia", "autonomia", "precio", "maletero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("Modelo");

        jScrollPane3.setViewportView(jTModelo);

        jLabel4.setText("potencia");

        jLabel5.setText("autonomia");

        jScrollPane4.setViewportView(jTAutonomia);

        jScrollPane5.setViewportView(jTPotencia);

        jLabel6.setText("precio");

        jLabel7.setText("maletero");

        jScrollPane6.setViewportView(jTMaletero);

        jScrollPane7.setViewportView(jTPrecio);

        jBModificar.setText("Modificar");
        jBModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBModificarMouseClicked(evt);
            }
        });
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBDelete.setText("Delete");
        jBDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBDeleteMouseClicked(evt);
            }
        });
        jBDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeleteActionPerformed(evt);
            }
        });

        jBImportCSV.setText("Importar CSV");
        jBImportCSV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBImportCSVMouseClicked(evt);
            }
        });
        jBImportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImportCSVActionPerformed(evt);
            }
        });

        jBLeer.setText("Leer");
        jBLeer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBLeerMouseClicked(evt);
            }
        });
        jBLeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLeerActionPerformed(evt);
            }
        });

        btExortarCSV.setText("exportar CSV");
        btExortarCSV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btExortarCSVMouseClicked(evt);
            }
        });
        btExortarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExortarCSVActionPerformed(evt);
            }
        });

        btExortarJSON.setText("Exportar JSON");
        btExortarJSON.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btExortarJSONMouseClicked(evt);
            }
        });
        btExortarJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExortarJSONActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(jBCrear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBLeer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBImportCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btExortarCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btExortarJSON, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBModificar)
                        .addComponent(jBDelete)
                        .addComponent(jBImportCSV))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBCrear)
                        .addComponent(jBLeer)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btExortarCSV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btExortarJSON)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearActionPerformed

    }//GEN-LAST:event_jBCrearActionPerformed

    private void jBCrearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCrearMouseClicked
        // TODO add your handling code here:
        try {
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection conn = DriverManager.getConnection(url, "root", "");

            // Corrige la consulta SQL y especifica las columnas a las que deseas insertar datos
            String sql = "INSERT INTO coche (modelo, potencia, autonomia, precio, Maletero) VALUES (?, ?, ?, ?, ?)";
            String modelo = jTModelo.getText();
            String parse = jTPotencia.getText();
            int potencia = Integer.parseInt(parse);
            parse = jTAutonomia.getText();
            int autonomia = Integer.parseInt(parse);
            parse = jTPrecio.getText();
            int precio = Integer.parseInt(parse);
            parse = jTMaletero.getText();
            int maletero = Integer.parseInt(parse);
            // Prepara la consulta
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, modelo);
            statement.setInt(2, potencia);
            statement.setInt(3, autonomia);
            statement.setInt(4, precio);
            statement.setInt(5, maletero);

            // Ejecuta la consulta de inserción
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Registro insertado exitosamente.");

                // Agrega una nueva fila a la tabla con los datos ingresados
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(new Object[]{modelo, potencia, autonomia, precio, maletero});
            } else {
                System.out.println("No se pudo insertar el registro.");
            }

            // Cierra la conexión a la base de datos
            conn.close();
        } catch (SQLException ex) {
            // Maneja las excepciones de SQL
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jBCrearMouseClicked

    private void jBModificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBModificarMouseClicked
        try {
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection conn = DriverManager.getConnection(url, "root", "");

            String sql = "UPDATE coche SET modelo=?, potencia=?, autonomia=?, precio=?, Maletero=? WHERE IDCoche=?";

            String modelo = jTModelo.getText();
            int potencia = Integer.parseInt(jTPotencia.getText());
            int autonomia = Integer.parseInt(jTAutonomia.getText());
            int precio = Integer.parseInt(jTPrecio.getText());
            int maletero = Integer.parseInt(jTMaletero.getText());

            int filaSeleccionada = jTable1.getSelectedRow();
            if (filaSeleccionada != -1) {
                int id = Integer.parseInt(jTable1.getValueAt(filaSeleccionada, 0).toString());

                PreparedStatement statement = conn.prepareStatement(sql);
                statement.setString(1, modelo);
                statement.setInt(2, potencia);
                statement.setInt(3, autonomia);
                statement.setInt(4, precio);
                statement.setInt(5, maletero);
                statement.setInt(6, id); // Agrega el ID para filtrar la fila a modificar

                int rowsAffected = statement.executeUpdate();

                if (rowsAffected > 0) {
                    System.out.println("Registro modificado exitosamente.");

                    // Actualiza la fila seleccionada en la tabla con los datos modificados
                    jTable1.setValueAt(modelo, filaSeleccionada, 1);
                    jTable1.setValueAt(potencia, filaSeleccionada, 2);
                    jTable1.setValueAt(autonomia, filaSeleccionada, 3);
                    jTable1.setValueAt(precio, filaSeleccionada, 4);
                    jTable1.setValueAt(maletero, filaSeleccionada, 5);
                } else {
                    System.out.println("No se pudo modificar el registro.");
                }
            }

            // Cierra la conexión a la base de datos
            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jBModificarMouseClicked

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBDeleteMouseClicked
        try {
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection conn = DriverManager.getConnection(url, "root", "");

            String respuesta = JOptionPane.showInputDialog("Introduce el ID que quieres eliminar");
            int id = Integer.parseInt(respuesta);

            // Consulta SQL para eliminar la fila con el ID seleccionado
            String sql = "DELETE FROM coche WHERE IDCoche = ?";

            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setInt(1, id);

            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Registro eliminado exitosamente.");

                // Buscar y eliminar la fila correspondiente en la tabla
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    if (Integer.parseInt(model.getValueAt(i, 0).toString()) == id) {
                        model.removeRow(i);
                        break; // Salir del bucle una vez que se haya eliminado la fila
                    }
                }
            } else {
                System.out.println("No se pudo eliminar el registro.");
            }

            // Cierra la conexión a la base de datos
            conn.close();
        } catch (SQLException ex) {
            // Maneja las excepciones de SQL
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jBDeleteMouseClicked

    private void jBDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBDeleteActionPerformed

    private void jBImportCSVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBImportCSVMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecciona un archivo CSV para importar");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos CSV", "csv"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
                String line;

                String url = "jdbc:mysql://localhost:3306/tesla";
                Connection conn = DriverManager.getConnection(url, "root", "");

                // Consulta SQL para insertar datos en la tabla
                String sql = "INSERT INTO coche (modelo, potencia, autonomia, precio, Maletero) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement statement = conn.prepareStatement(sql);

                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(",");
                    if (data.length == 5) {
                        statement.setString(1, data[0]);
                        statement.setInt(2, Integer.parseInt(data[1]));
                        statement.setInt(3, Integer.parseInt(data[2]));
                        statement.setInt(4, Integer.parseInt(data[3]));
                        statement.setInt(5, Integer.parseInt(data[4]));

                        int rowsAffected = statement.executeUpdate();
                        if (rowsAffected > 0) {
                            // Los datos se insertaron con éxito
                        } else {
                            // No se pudo insertar el registro
                        }
                    }
                }

                // Cierra la conexión a la base de datos
                conn.close();

                // Actualiza la tabla en tu JFrame para reflejar los datos importados
                // (Puedes usar el mismo código que se usa para mostrar datos de la base de datos en la tabla)
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al importar datos desde el archivo CSV", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jBImportCSVMouseClicked

    private void jBImportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImportCSVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBImportCSVActionPerformed

    private void jBLeerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBLeerMouseClicked

        try {
            String url = "jdbc:mysql://localhost:3306/tesla";
            Connection conn = DriverManager.getConnection(url, "root", "");

            // Consulta SQL para seleccionar todos los registros de la tabla "coche"
            String sql = "SELECT IDCoche, modelo, potencia, autonomia, precio, Maletero FROM coche";

            PreparedStatement statement = conn.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Limpia los datos existentes en la tabla

            while (result.next()) {
                // Agrega cada fila de datos de la base de datos a la tabla en tu JFrame
                model.addRow(new Object[]{
                    result.getInt("IDCoche"),
                    result.getString("modelo"),
                    result.getInt("potencia"),
                    result.getInt("autonomia"),
                    result.getInt("precio"),
                    result.getInt("Maletero")
                });
            }

            // Cierra la conexión a la base de datos
            conn.close();
        } catch (SQLException ex) {
            // Maneja las excepciones de SQL
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jBLeerMouseClicked

    private void jBLeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLeerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBLeerActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada != -1) {
            String modelo = jTable1.getValueAt(filaSeleccionada, 1).toString();
            String potencia = jTable1.getValueAt(filaSeleccionada, 2).toString();
            String autonomia = jTable1.getValueAt(filaSeleccionada, 3).toString();
            String precio = jTable1.getValueAt(filaSeleccionada, 4).toString();
            String maletero = jTable1.getValueAt(filaSeleccionada, 5).toString();

            jTModelo.setText(modelo);
            jTPotencia.setText(potencia);
            jTAutonomia.setText(autonomia);
            jTPrecio.setText(precio);
            jTMaletero.setText(maletero);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btExortarCSVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExortarCSVMouseClicked
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        try {

            String archivoCSV = "C:\\Users\\Javier\\Documents\\salidacsv.txt";
            BufferedWriter bufferEscritor = new BufferedWriter(new FileWriter(archivoCSV));
            bufferEscritor.write("""
                                  ID  modelo potencia autonomia Precio Maletero\n
                                 """);
            String id = JOptionPane.showInputDialog("Introduce el id para grabarlo en un CSV");
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                String filaID = jTable1.getValueAt(i, 0).toString();
                if (id.equals(filaID)) {
                    String valorFilaID = jTable1.getValueAt(i, 0).toString();
                    String valorFilaModelo = jTable1.getValueAt(i, 1).toString();
                    String valorFilaPotencia = jTable1.getValueAt(i, 2).toString();
                    String valorFilaAutonomia = jTable1.getValueAt(i, 3).toString();
                    String valorFilaPrecio = jTable1.getValueAt(i, 4).toString();
                    String valorFilaMaletero = jTable1.getValueAt(i, 5).toString();
                    bufferEscritor.append(valorFilaID + "," + valorFilaModelo + "," + valorFilaPotencia + "," + valorFilaAutonomia + "," + valorFilaPrecio + "," + valorFilaMaletero + "\n");
                } else {
                    JOptionPane.showMessageDialog(null, "No se ha escrito nada");
                }
            }
            bufferEscritor.close();
        } catch (IOException ex) {
        }

    }//GEN-LAST:event_btExortarCSVMouseClicked

    private void btExortarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExortarCSVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btExortarCSVActionPerformed

    private void btExortarJSONMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExortarJSONMouseClicked
        String url = "jdbc:mysql://localhost:3306/tesla";

        try {
            Connection conn = DriverManager.getConnection(url, "root", "");
            if (conn != null) {
                try {
                    Statement statement = conn.createStatement();
                    String consultaSQL = "SELECT * FROM tesla";
                    ResultSet resultSet = statement.executeQuery(consultaSQL);

                    JsonArray jsonArray = new JsonArray();
                    JsonObject objeto = new JsonObject();
                    while (resultSet.next()) {
                        objeto.addProperty("id", resultSet.getInt("id"));
                        objeto.addProperty("modelo", resultSet.getString("modelo"));
                        objeto.addProperty("potencia", resultSet.getInt("potencia"));
                        objeto.addProperty("autonomia", resultSet.getInt("autonomia"));
                        objeto.addProperty("precio", resultSet.getInt("precio"));
                        objeto.addProperty("maletero", resultSet.getInt("maletero"));
                    }

                    Gson gson = new GsonBuilder().setPrettyPrinting().create();
                    String json = gson.toJson(objeto);

                    try (FileWriter fileWriter = new FileWriter("datos.json")) {
                        fileWriter.write(json);
                        JOptionPane.showMessageDialog(null, "Datos exportados correctamente a datos.json");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(BDtable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btExortarJSONMouseClicked

    private void btExortarJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExortarJSONActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btExortarJSONActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BDtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BDtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BDtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BDtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BDtable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExortarCSV;
    private javax.swing.JButton btExortarJSON;
    private javax.swing.JButton jBCrear;
    private javax.swing.JButton jBDelete;
    private javax.swing.JButton jBImportCSV;
    private javax.swing.JButton jBLeer;
    private javax.swing.JButton jBModificar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextPane jTAutonomia;
    private javax.swing.JTextPane jTMaletero;
    private javax.swing.JTextPane jTModelo;
    private javax.swing.JTextPane jTPotencia;
    private javax.swing.JTextPane jTPrecio;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
